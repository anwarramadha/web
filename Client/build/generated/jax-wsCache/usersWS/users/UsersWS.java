
package users;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.11-b150120.1832
 * Generated source version: 2.2
 * 
 */
@WebService(name = "usersWS", targetNamespace = "http://users/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface UsersWS {


    /**
     * 
     * @param token
     * @return
     *     returns java.util.List<users.Users>
     * @throws ClassNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getUserData", targetNamespace = "http://users/", className = "users.GetUserData")
    @ResponseWrapper(localName = "getUserDataResponse", targetNamespace = "http://users/", className = "users.GetUserDataResponse")
    @Action(input = "http://users/usersWS/getUserDataRequest", output = "http://users/usersWS/getUserDataResponse", fault = {
        @FaultAction(className = ClassNotFoundException_Exception.class, value = "http://users/usersWS/getUserData/Fault/ClassNotFoundException")
    })
    public List<Users> getUserData(
        @WebParam(name = "token", targetNamespace = "")
        String token)
        throws ClassNotFoundException_Exception
    ;

    /**
     * 
     * @param token
     * @return
     *     returns java.lang.Boolean
     * @throws ParseException_Exception
     * @throws ClassNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "isTokenValid", targetNamespace = "http://users/", className = "users.IsTokenValid")
    @ResponseWrapper(localName = "isTokenValidResponse", targetNamespace = "http://users/", className = "users.IsTokenValidResponse")
    @Action(input = "http://users/usersWS/isTokenValidRequest", output = "http://users/usersWS/isTokenValidResponse", fault = {
        @FaultAction(className = ClassNotFoundException_Exception.class, value = "http://users/usersWS/isTokenValid/Fault/ClassNotFoundException"),
        @FaultAction(className = ParseException_Exception.class, value = "http://users/usersWS/isTokenValid/Fault/ParseException")
    })
    public Boolean isTokenValid(
        @WebParam(name = "token", targetNamespace = "")
        String token)
        throws ClassNotFoundException_Exception, ParseException_Exception
    ;

    /**
     * 
     * @param catalogid
     * @param action
     * @param accessToken
     * @return
     *     returns java.lang.Integer
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addLike", targetNamespace = "http://users/", className = "users.AddLike")
    @ResponseWrapper(localName = "addLikeResponse", targetNamespace = "http://users/", className = "users.AddLikeResponse")
    @Action(input = "http://users/usersWS/addLikeRequest", output = "http://users/usersWS/addLikeResponse")
    public Integer addLike(
        @WebParam(name = "access_token", targetNamespace = "")
        String accessToken,
        @WebParam(name = "catalogid", targetNamespace = "")
        String catalogid,
        @WebParam(name = "action", targetNamespace = "")
        String action);

}
